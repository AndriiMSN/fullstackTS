{"version":3,"sources":["styles.ts","utils/findItemIndexById.ts","AppStateContext.tsx","utils/moveItem.ts","useItemDrag.ts","utils/isHidden.ts","Card.tsx","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","Column.tsx","CustomDragLayer.tsx","App.tsx","index.tsx"],"names":["AppContainer","styled","div","DragPreviewContainer","props","isPreview","undefined","isHidden","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemInput","input","NewItemButton","CustomDragLayerContainer","findItemIndexById","items","id","findIndex","item","AppStateContext","createContext","appStateReducer","state","action","type","draggedItem","payload","lists","nanoid","text","tasks","targetLaneIndex","listId","push","dragIndex","hoverIndex","array","from","to","startIndex","length","splice","moveItem","sourceColumn","targetColumn","sourceLaneIndex","appData","AppStateProvider","children","useReducer","dispatch","Provider","value","useAppState","useContext","useItemDrag","useDrag","begin","end","drag","preview","useEffect","getEmptyImage","captureDraggingState","itemType","Boolean","Card","index","columnId","ref","useRef","useDrop","accept","hover","drop","NewItemForm","onAdd","useState","setText","inputRef","current","focus","useFocus","onChange","e","target","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","Column","map","task","i","key","getItemStyles","currentOffset","display","x","y","transform","WebkitTransform","CustomDragLayer","useDragLayer","monitor","getItem","getSourceClientOffset","isDragging","style","App","list","ReactDOM","render","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.d87afc6d.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n  align-items: flex-start;\n  background-color: #3179ba;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  padding: 20px;\n  width: 100%;\n`\n\ninterface DragPreviewContainerProps {\n  isHidden?: boolean\n  isPreview?: boolean\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n  transform: ${props => (props.isPreview ? \"rotate(5deg)\" : undefined)};\n  opacity: ${props => (props.isHidden ? 0 : 1)};\n`\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n  background-color: #ebecf0;\n  width: 300px;\n  min-height: 40px;\n  margin-right: 20px;\n  border-radius: 3px;\n  padding: 8px 8px;\n  flex-grow: 0;\n  flex-shrink: 0;\n`\n\nexport const ColumnTitle = styled.div`\n  padding: 6px 16px 12px;\n  font-weight: bold;\n`\n\nexport const CardContainer = styled(DragPreviewContainer)`\n  background-color: #fff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  max-width: 300px;\n  border-radius: 3px;\n  box-shadow: #091e4240 0px 1px 0px 0px;\n`\n\ninterface AddItemButtonProps {\n  dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n  background-color: #ffffff3d;\n  border-radius: 3px;\n  border: none;\n  color: ${props => (props.dark ? \"#000\" : \"#fff\")};\n  cursor: pointer;\n  max-width: 300px;\n  padding: 10px 12px;\n  text-align: left;\n  transition: background 85ms ease-in;\n  width: 100%;\n  &:hover {\n    background-color: #ffffff52;\n  }\n`\n\nexport const NewItemFormContainer = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n`\n\nexport const NewItemInput = styled.input`\n  border-radius: 3px;\n  border: none;\n  box-shadow: #091e4240 0px 1px 0px 0px; \n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  width: 100%;\n`\n\nexport const NewItemButton = styled.button`\n  background-color: #5aac44;\n  border-radius: 3px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  padding: 6px 12px;\n  text-align: center;\n`\n\nexport const CustomDragLayerContainer = styled.div`\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n`\n","interface Item {\n  id: string\n}\n\nexport const findItemIndexById = <T extends Item>(items: T[], id: string) => {\n  return items.findIndex((item: T) => item.id === id)\n}\n","import React, { createContext, useReducer, useContext } from \"react\"\nimport { nanoid } from \"nanoid\"\nimport { findItemIndexById } from \"./utils/findItemIndexById\"\nimport { moveItem } from \"./utils/moveItem\"\nimport { DragItem } from \"./DragItem\"\n\ninterface Task {\n  id: string\n  text: string\n}\n\ninterface List {\n  id: string\n  text: string\n  tasks: Task[]\n}\n\nexport interface AppState {\n  draggedItem: DragItem | undefined\n  lists: List[]\n}\n\ntype Action =\n  | {\n      type: \"SET_DRAGGED_ITEM\"\n      payload: DragItem | undefined\n    }\n  | {\n      type: \"ADD_LIST\"\n      payload: string\n    }\n  | {\n      type: \"ADD_TASK\"\n      payload: { text: string; listId: string }\n    }\n  | {\n      type: \"MOVE_LIST\"\n      payload: {\n        dragIndex: number\n        hoverIndex: number\n      }\n    }\n  | {\n      type: \"MOVE_TASK\"\n      payload: {\n        dragIndex: number\n        hoverIndex: number\n        sourceColumn: string\n        targetColumn: string\n      }\n    }\n\ninterface AppStateContextProps {\n  state: AppState\n  dispatch: React.Dispatch<any>\n}\n\nconst AppStateContext = createContext<AppStateContextProps>(\n  {} as AppStateContextProps\n)\n\nconst appStateReducer = (state: AppState, action: Action): AppState => {\n  switch (action.type) {\n    case \"SET_DRAGGED_ITEM\": {\n      return { ...state, draggedItem: action.payload }\n    }\n    case \"ADD_LIST\": {\n      return {\n        ...state,\n        lists: [\n          ...state.lists,\n          { id: nanoid(), text: action.payload, tasks: [] }\n        ]\n      }\n    }\n    case \"ADD_TASK\": {\n      const targetLaneIndex = findItemIndexById(\n        state.lists,\n        action.payload.listId\n      )\n      state.lists[targetLaneIndex].tasks.push({\n        id: nanoid(),\n        text: action.payload.text\n      })\n\n      return {\n        ...state\n      }\n    }\n    case \"MOVE_LIST\": {\n      const { dragIndex, hoverIndex } = action.payload\n      state.lists = moveItem(state.lists, dragIndex, hoverIndex)\n      return { ...state }\n    }\n    case \"MOVE_TASK\": {\n      const {\n        dragIndex,\n        hoverIndex,\n        sourceColumn,\n        targetColumn\n      } = action.payload\n      const sourceLaneIndex = findItemIndexById(state.lists, sourceColumn)\n      const targetLaneIndex = findItemIndexById(state.lists, targetColumn)\n      const item = state.lists[sourceLaneIndex].tasks.splice(dragIndex, 1)[0]\n      state.lists[targetLaneIndex].tasks.splice(hoverIndex, 0, item)\n      return { ...state }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\nconst appData: AppState = {\n  draggedItem: undefined,\n  lists: [\n    {\n      id: \"0\",\n      text: \"To Do\",\n      tasks: [{ id: \"c0\", text: \"Generate app scaffold\" }]\n    },\n    {\n      id: \"1\",\n      text: \"In Progress\",\n      tasks: [{ id: \"c2\", text: \"Learn Typescript\" }]\n    },\n    {\n      id: \"2\",\n      text: \"Done\",\n      tasks: [{ id: \"c3\", text: \"Begin to use static typing\" }]\n    }\n  ]\n}\n\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\n  const [state, dispatch] = useReducer(appStateReducer, appData)\n\n  return (\n    <AppStateContext.Provider value={{ state, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  )\n}\n\nexport const useAppState = () => {\n  return useContext(AppStateContext)\n}\n","export const moveItem = <T>(array: T[], from: number, to: number) => {\n  const startIndex = to < 0 ? array.length + to : to;\n  const item = array.splice(from, 1)[0]\n  array.splice(startIndex, 0, item)\n  return array\n}\n","import { useDrag } from \"react-dnd\"\nimport { useAppState } from \"./AppStateContext\"\nimport { DragItem } from \"./DragItem\"\nimport { useEffect } from \"react\"\nimport { getEmptyImage } from \"react-dnd-html5-backend\"\n\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState()\n  const [, drag, preview ] = useDrag({\n    item,\n    begin: () =>\n      dispatch({\n        type: \"SET_DRAGGED_ITEM\",\n        payload: item\n      }),\n    end: () => dispatch({ type: \"SET_DRAGGED_ITEM\", payload: undefined })\n  })\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, [preview]);\n  return { drag }\n}\n","import { DragItem } from \"../DragItem\"\n\nexport const isHidden = (\n  isPreview: boolean | undefined,\n  draggedItem: DragItem | undefined,\n  itemType: string,\n  id: string,\n): boolean => {\n  return Boolean(\n    !isPreview &&\n      draggedItem &&\n      draggedItem.type === itemType &&\n      draggedItem.id === id\n  )\n}\n","import React, { useRef } from \"react\"\nimport { CardContainer } from \"./styles\"\nimport { useItemDrag } from \"./useItemDrag\"\nimport { useDrop } from \"react-dnd\"\nimport { DragItem } from \"./DragItem\"\nimport { useAppState } from \"./AppStateContext\"\nimport { isHidden } from \"./utils/isHidden\"\n\ninterface CardProps {\n  text: string\n  index: number\n  id: string\n  columnId: string\n  isPreview?: boolean\n}\n\nexport const Card = ({\n  text,\n  id,\n  index,\n  columnId,\n  isPreview\n}: CardProps) => {\n  const { state, dispatch } = useAppState()\n  const ref = useRef<HTMLDivElement>(null)\n  const { drag } = useItemDrag({ type: \"CARD\", id, index, text, columnId })\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n    hover(item: DragItem) {\n      if (item.type === \"CARD\") {\n        if (item.id === id) {\n          return\n        }\n\n        const dragIndex = item.index\n        const hoverIndex = index\n        const sourceColumn = item.columnId\n        const targetColumn = columnId\n\n        dispatch({\n          type: \"MOVE_TASK\",\n          payload: { dragIndex, hoverIndex, sourceColumn, targetColumn }\n        })\n        item.index = hoverIndex\n        item.columnId = targetColumn\n      }\n    }\n  })\n\n  drag(drop(ref))\n\n  return (\n    <CardContainer\n      isHidden={isHidden(isPreview, state.draggedItem, \"CARD\", id)}\n      isPreview={isPreview}\n      ref={ref}\n    >\n      {text}\n    </CardContainer>\n  )\n}\n","import React, { useState } from \"react\"\nimport { useFocus } from \"./utils/useFocus\"\nimport { NewItemFormContainer, NewItemButton, NewItemInput } from \"./styles\"\n\ninterface NewItemFormProps {\n  onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\")\n  const inputRef = useFocus()\n\n  return (\n    <NewItemFormContainer>\n      <NewItemInput\n        ref={inputRef}\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <NewItemButton onClick={() => onAdd(text)}>Create</NewItemButton>\n    </NewItemFormContainer>\n  )\n}\n","import { useRef, useEffect } from \"react\"\n\nexport const useFocus = () => {\n  const ref = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    ref.current?.focus()\n  })\n\n  return ref\n}","import React, { useState } from \"react\"\nimport { NewItemForm } from \"./NewItemForm\"\nimport { AddItemButton } from \"./styles\"\n\ninterface AddNewItemProps {\n  onAdd(text: string): void\n  toggleButtonText: string\n  dark?: boolean\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n  const [showForm, setShowForm] = useState(false)\n  const { onAdd, toggleButtonText, dark } = props\n\n  if (showForm) {\n    return (\n      <NewItemForm\n        onAdd={text => {\n          onAdd(text)\n          setShowForm(false)\n        }}\n      />\n    )\n  }\n\n  return (\n    <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n      {toggleButtonText}\n    </AddItemButton>\n  )\n}\n","import React, { useRef } from \"react\"\nimport { ColumnContainer, ColumnTitle } from \"./styles\"\nimport { useAppState } from \"./AppStateContext\"\nimport { Card } from \"./Card\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useItemDrag } from \"./useItemDrag\"\nimport { useDrop } from \"react-dnd\"\nimport { DragItem } from \"./DragItem\"\nimport { isHidden } from \"./utils/isHidden\"\n\ninterface ColumnProps {\n  text: string\n  index: number\n  id: string\n  isPreview?: boolean\n}\n\nexport const Column = ({ text, index, id, isPreview }: ColumnProps) => {\n  const { state, dispatch } = useAppState()\n  const ref = useRef<HTMLDivElement>(null)\n  const [, drop] = useDrop({\n    accept: [\"COLUMN\", \"CARD\"],\n    hover(item: DragItem) {\n      if (item.type === \"COLUMN\") {\n        const dragIndex = item.index\n        const hoverIndex = index\n\n        if (dragIndex === hoverIndex) {\n          return\n        }\n\n        dispatch({ type: \"MOVE_LIST\", payload: { dragIndex, hoverIndex } })\n        item.index = hoverIndex\n      } else {\n        const dragIndex = item.index\n        const hoverIndex = 0\n        const sourceColumn = item.columnId\n        const targetColumn = id\n\n        if (sourceColumn === targetColumn) {\n          return\n        }\n\n        dispatch({\n          type: \"MOVE_TASK\",\n          payload: { dragIndex, hoverIndex, sourceColumn, targetColumn }\n        })\n\n        item.index = hoverIndex\n        item.columnId = targetColumn\n      }\n    }\n  })\n\n  const { drag } = useItemDrag({ type: \"COLUMN\", id, index, text })\n\n  drag(drop(ref))\n\n  return (\n    <ColumnContainer\n      isPreview={isPreview}\n      ref={ref}\n      isHidden={isHidden(isPreview, state.draggedItem, \"COLUMN\", id)}\n    >\n      <ColumnTitle>{text}</ColumnTitle>\n      {state.lists[index].tasks.map((task, i) => (\n        <Card\n          id={task.id}\n          columnId={id}\n          text={task.text}\n          key={task.id}\n          index={i}\n        />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another card\"\n        onAdd={text =>\n          dispatch({ type: \"ADD_TASK\", payload: { text, listId: id } })\n        }\n        dark\n      />\n    </ColumnContainer>\n  )\n}\n","import React from \"react\"\nimport { XYCoord, useDragLayer } from \"react-dnd\"\nimport { Column } from \"./Column\"\nimport { CustomDragLayerContainer } from \"./styles\"\nimport { Card } from \"./Card\"\n\nfunction getItemStyles(\n  currentOffset: XYCoord | null\n) {\n  if (!currentOffset) {\n    return {\n      display: \"none\"\n    }\n  }\n\n  const { x, y } = currentOffset\n\n  const transform = `translate(${x}px, ${y}px)`\n  return {\n    transform,\n    WebkitTransform: transform\n  }\n}\n\nconst CustomDragLayer: React.FC = () => {\n  const { isDragging, item, currentOffset } = useDragLayer(\n    monitor => ({\n      item: monitor.getItem(),\n      currentOffset: monitor.getSourceClientOffset(),\n      isDragging: monitor.isDragging()\n    })\n  )\n\n  if (!isDragging) {\n    return null\n  }\n\n  return (\n    <CustomDragLayerContainer>\n      <div style={getItemStyles(currentOffset)}>\n        {item.type === \"COLUMN\" ? (\n          <Column\n            id={item.id}\n            text={item.text}\n            index={item.index}\n            isPreview={true}\n          />\n        ) : (\n          <Card\n            columnId={item.columnId}\n            isPreview={true}\n            index={0}\n            id={item.id}\n            text={item.text}\n          />\n        )}\n      </div>\n    </CustomDragLayerContainer>\n  )\n}\nexport default CustomDragLayer\n","import React from \"react\"\nimport { Column } from \"./Column\"\nimport { AppContainer } from \"./styles\"\nimport { useAppState } from \"./AppStateContext\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport CustomDragLayer from \"./CustomDragLayer\"\n\nconst App = () => {\n  const {state, dispatch} = useAppState()\n\n  return (\n    <AppContainer>\n      <CustomDragLayer />\n      {state.lists.map((list, i) => (\n        <Column id={list.id} text={list.text} key={list.id} index={i}/>\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another list\"\n        onAdd={text => dispatch({ type: \"ADD_LIST\", payload: text })}\n      />\n    </AppContainer>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { DndProvider } from \"react-dnd\"\nimport Backend from \"react-dnd-html5-backend\"\nimport { AppStateProvider } from \"./AppStateContext\"\n\nReactDOM.render(\n  <DndProvider backend={Backend}>\n    <AppStateProvider>\n      <App />\n    </AppStateProvider>\n  </DndProvider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}